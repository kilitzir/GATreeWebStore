query = list(datarunID = globalvariables1$datarun,
action = ppp$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = globalvariables1$Guid,
TreeRecordId = ppp$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
aaa <- GA.createTrees(pppCreateTrees)
View(vvar1)
aaa <- GA.createTrees(pppCreateTrees)
as.numeric(gsub(",",".",data_min[var[1]]))
data_min[var[1]]
data_min
data_min
class(globalvariables1$dataAttributesTable)
globalvariables1$dataAttributesTable
name_maxValue_matrix <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "maxValue")])
name_maxValue_matrix
class(name_maxValue_matrix)
t(name_maxValue_matrix)
rownames(transposed_matrix) <- NULL
rownames(name_maxValue_matrix) <- NULL
t(name_maxValue_matrix)
name_maxValue_matrix <- t(name_maxValue_matrix)
rownames(name_maxValue_matrix)<-NULL
name_maxValue_matrix
as.numeric(gsub(",",".",data_min[var[1]]))
var[1]
var
as.numeric(gsub(",",".",name_maxValue_matrix[var[1]]))
var[1]
GA.mutation <-function(ppp)
{
trees <- fromJSON(ppp$result)
tree1 <- trees$tree;
tree1 <- GA.convert_A_tree_to_table(tree1)
#do the mutation
# return the json response
trees = list()
for (i in 1:1)
{
vvar1 = GA.create_one_tree(dim(globalvariables1$dataset)[2],
globalvariables1$dataAttributesTable$type,
globalvariables1$dataAttributesTable$minValue,
globalvariables1$dataAttributesTable$maxValue)
vvar2 = runif(1,0,1)[1]
# = GA.payoff(trees[[i]], TODO: Fix it
#                            globalvariables1$dataset[1:class_pos],
#                            globalvariables1$dataAttributesTable$type,
#                            globalvariables1$dataAttributesTable$type,
#                            globalvariables1$parameters$correctionfactor)
vvar3 <- list(tree = toString(vvar1),evaluation=toString(vvar2))
trees[[i]] = vvar3
} #for
globalvariables1$trees = trees
query = list(datarunID = globalvariables1$datarun,
action = ppp$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = globalvariables1$Guid,
TreeRecordId = ppp$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
aaa <- GA.createTrees(pppCreateTrees)
View(vvar1)
aaa <- GA.createTrees(pppCreateTrees)
which(names(globalvariables1$datase) =="class"
)
pppCreateTrees
GA.createTrees(pppCreateTrees)
which(names(globalvariables1$datase) == "class")-1
GA.createTrees <- function(params)
{
browser()
trees = list()
for (i in 1:as.numeric(params$message))
{
min1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "minValue")])
min1 <- t(min1)
rownames(min1)<-NULL
max1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "maxValue")])
max1 <- t(max1)
rownames(max1)<-NULL
vvar1 <- GA.create_one_tree(which(names(globalvariables1$datase) == "class")-1, # we assume that the class is the last item
globalvariables1$dataAttributesTable$type,
min1,
max1)
#vvar2 = runif(1,0,1)[1]
# we make the variables to match for the payoff function from Iakovakis)
list1 <- globalvariables1$dataAttributesTable$type[-length(globalvariables1$dataAttributesTable$type)]
list1 <- as.list(list1) # attributes's type without the class attribute
vector1 = unname(globalvariables1$dataset$classLevel)
vvar2 = GA.payoff(vvar1,
globalvariables1$dataset[1:(grep("\\bclass\\b", colnames(globalvariables1$dataset))- 1)], # everything but the last column
list1,
unlist(vector1),
globalvariables1$parameters$correctionfactor)
vvar3 <- list(tree=toString(vvar1),evaluation=toString(vvar2))
trees[[i]] = vvar3
} #for
#browser()
globalvariables1$trees = trees
query = list(datarunID = globalvariables1$datarun,
action = ppp$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = globalvariables1$Guid,
TreeRecordId = ppp$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
which(names(globalvariables1$datase) == "class")-1
GA.createTrees(pppCreateTrees)
View(tree)
tree
DataTypes
prediction
library(httr)
library(jsonlite)
library(stringr)
library(dplyr)
aaa <- GA.createTrees(pppCreateTrees)
aaa
aaa <- GA.createTrees(pppCreateTrees)
minV <- as.numeric(gsub(",",".",data_min[var[1]]))
as.numeric(gsub(",",".",data_min[var[1]]))
gsub(",",".",data_min[var[1]]))
gsub(",",".",data_min[var[1]])
var[1]
data_min
class(data_min)
aaa <- GA.createTrees(pppCreateTrees)
min1
min2
max1
GA.createTrees <- function(params)
{
browser()
trees = list()
for (i in 1:as.numeric(params$message))
{
min1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "minValue")])
min1 <- t(min1)
rownames(min1)<-NULL
min1 <- min1[, -ncol(min1)]
max1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "maxValue")])
max1 <- t(max1)
rownames(max1)<-NULL
min1 <- min1[, -ncol(min1)]
vvar1 <- GA.create_one_tree(which(names(globalvariables1$datase) == "class")-1, # we assume that the class is the last item
globalvariables1$dataAttributesTable$type,
min1,
max1)
#vvar2 = runif(1,0,1)[1]
# we make the variables to match for the payoff function from Iakovakis)
list1 <- globalvariables1$dataAttributesTable$type[-length(globalvariables1$dataAttributesTable$type)]
list1 <- as.list(list1) # attributes's type without the class attribute
vector1 = unname(globalvariables1$dataset$classLevel)
vvar2 = GA.payoff(vvar1,
globalvariables1$dataset[1:(grep("\\bclass\\b", colnames(globalvariables1$dataset))- 1)], # everything but the last column
list1,
unlist(vector1),
globalvariables1$parameters$correctionfactor)
vvar3 <- list(tree=toString(vvar1),evaluation=toString(vvar2))
trees[[i]] = vvar3
} #for
#browser()
globalvariables1$trees = trees
query = list(datarunID = globalvariables1$datarun,
action = ppp$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = globalvariables1$Guid,
TreeRecordId = ppp$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
aaa <- GA.createTrees(pppCreateTrees)
View(max1)
View(min1)
View(max1)
GA.createTrees <- function(params)
{
browser()
trees = list()
for (i in 1:as.numeric(params$message))
{
min1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "minValue")])
min1 <- t(min1)
rownames(min1)<-NULL
min1 <- min1[, -ncol(min1)]
max1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "maxValue")])
max1 <- t(max1)
rownames(max1)<-NULL
max1 <- max1[, -ncol(max1)]
vvar1 <- GA.create_one_tree(which(names(globalvariables1$datase) == "class")-1, # we assume that the class is the last item
globalvariables1$dataAttributesTable$type,
min1,
max1)
#vvar2 = runif(1,0,1)[1]
# we make the variables to match for the payoff function from Iakovakis)
list1 <- globalvariables1$dataAttributesTable$type[-length(globalvariables1$dataAttributesTable$type)]
list1 <- as.list(list1) # attributes's type without the class attribute
vector1 = unname(globalvariables1$dataset$classLevel)
vvar2 = GA.payoff(vvar1,
globalvariables1$dataset[1:(grep("\\bclass\\b", colnames(globalvariables1$dataset))- 1)], # everything but the last column
list1,
unlist(vector1),
globalvariables1$parameters$correctionfactor)
vvar3 <- list(tree=toString(vvar1),evaluation=toString(vvar2))
trees[[i]] = vvar3
} #for
#browser()
globalvariables1$trees = trees
query = list(datarunID = globalvariables1$datarun,
action = ppp$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = globalvariables1$Guid,
TreeRecordId = ppp$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
GA.createTrees <- function(params)
{
browser()
trees = list()
for (i in 1:as.numeric(params$message))
{
min1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "minValue")])
min1 <- t(min1)
rownames(min1)<-NULL
min1 <- min1[, -ncol(min1)]
max1 <- as.matrix(globalvariables1$dataAttributesTable[, c("name", "maxValue")])
max1 <- t(max1)
rownames(max1)<-NULL
max1 <- max1[, -ncol(max1)]
vvar1 <- GA.create_one_tree(which(names(globalvariables1$datase) == "class")-1, # we assume that the class is the last item
globalvariables1$dataAttributesTable$type,
min1,
max1)
#vvar2 = runif(1,0,1)[1]
# we make the variables to match for the payoff function from Iakovakis)
list1 <- globalvariables1$dataAttributesTable$type[-length(globalvariables1$dataAttributesTable$type)]
list1 <- as.list(list1) # attributes's type without the class attribute
vector1 = unname(globalvariables1$dataset$classLevel)
vvar2 = GA.payoff(vvar1,
globalvariables1$dataset[1:(grep("\\bclass\\b", colnames(globalvariables1$dataset))- 1)], # everything but the last column
list1,
unlist(vector1),
globalvariables1$parameters$correctionfactor)
vvar3 <- list(tree=toString(vvar1),evaluation=toString(vvar2))
trees[[i]] = vvar3
} #for
#browser()
globalvariables1$trees = trees
query = list(datarunID = globalvariables1$datarun,
action = ppp$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = globalvariables1$Guid,
TreeRecordId = ppp$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
aaa <- GA.createTrees(pppCreateTrees)
aaa
library(httr)
library(jsonlite)
library(stringr)
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/dataset.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/main.R")
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/ReadParams.R", encoding = 'UTF-8')
ppp <- GA.getAJob()
ppp
ppp
pppCrossOver <<- ppp
pppCrossOver
GA.crossOver(pppCrossOver)
globalvariables1$tree_labels
lobalvariables1$tree_labels <- c("id","var","split","class","lChild","rChild")
globalvariables1$tree_labels <- c("id","var","split","class","lChild","rChild")
GA.crossOver(pppCrossOver)
GA.postAJob() GA.crossOver(pppCrossOver))
GA.postAJob(GA.crossOver(pppCrossOver))
ppp <- GA.getAJob()
GA.postAJob(GA.crossOver(ppp))
GA.postAJob(GA.crossOver(GA.getAJob()))
c
c
n
Q
GA.postAJob(GA.crossOver(GA.getAJob()))
c
c
Q
Q
GA.postAJob(GA.crossOver(GA.getAJob()))
c
GA.postAJob(GA.crossOver(GA.getAJob()))
c
c
c
c
n
Q
GA.postAJob(GA.crossOver(ppp = GA.getAJob()))
ppp = GA.getAJob()
GA.postAJob(GA.crossOver(ppp))
ppp = GA.getAJob()
GA.postAJob(GA.crossOver(ppp))
c
ppp = GA.getAJob()
GA.postAJob(GA.crossOver(ppp))
ppp = GA.getAJob()
GA.postAJob(GA.crossOver(ppp))
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.postAJob(GA.crossOver(GA.getAJob()))
c
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/dataset.R", encoding = 'UTF-8')
GA.postAJob(GA.crossOver(GA.getAJob()))
Q
GA.crossOver<-function(response)
{
browser()
trees <- fromJSON(response$result)
parent1 <- trees$tree1$tree
parent2 <- trees$tree2$tree
dataframe_parent1 <- GA.convert_A_tree_to_table(parent1)
dataframe_parent2 <- GA.convert_A_tree_to_table(parent2)
trees <- GA.crossover(dataframe_parent1,dataframe_parent2)
list1 <- globalvariables1$dataAttributesTable$type[-length(globalvariables1$dataAttributesTable$type)]
list1 <- as.list(list1) # attributes's type without the class attribute
vector1 = unname(globalvariables1$dataset$classLevel)
eval1 <- GA.payoff(trees$tree1,
globalvariables1$dataset[1:(grep("\\bclass\\b", colnames(globalvariables1$dataset))- 1)], # everything but the last column
list1,
unlist(vector1),
globalvariables1$parameters$correctionfactor)
eval2 <- GA.payoff(trees$tree2,
globalvariables1$dataset[1:(grep("\\bclass\\b", colnames(globalvariables1$dataset))- 1)], # everything but the last column
list1,
unlist(vector1),
globalvariables1$parameters$correctionfactor)
browser()
#colnames(trees$tree1) <- NULL
#colnames(trees$tree2) <- NULL
trees = list()
trees$tree1 = as.matrix(trees$tree1)
list1 <- list(tree=paste(trees$tree1,collapse = ","),evaluation=toString(eval1))
trees[[1]] =  list1
trees$tree2 = as.matrix(trees$tree2)
list2 <- list(tree=paste(trees$tree2,collapse = ","),evaluation=toString(eval2))
trees[[2]] =  list1
query = list(datarunID = globalvariables1$datarun,
action = response$action,
result = toJSON(trees,auto_unbox = TRUE),
clientGuid = response$Guid,
TreeRecordId = response$treeRecordId)
return(toJSON(query,pretty = TRUE,auto_unbox = TRUE))
}
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.circle()
Q
Q
Q
Q
n
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/dataset.R", encoding = 'UTF-8')
GA.mutateTree()
GA.mutateTree(ppp)
View(pppCreateTrees)
View(pppCrossOver)
ppp
pppMutate <- GA.getAJob()
pppMutate <<- pppMutate
pppMutate
GA.mutate(pppMutate)
GA.mutation(pppMutate\)
GA.mutation(pppMutate)
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.mutation(pppMutate)
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
View(list1)
globalvariables1$dataAttributesTable
globalvariables1$dataAttributesTable["class"]
globalvariables1$dataAttributesTable["class",]
globalvariables1$dataAttributesTable[name=class,]
globalvariables1$dataAttributesTable[name="class",]
globalvariables1$dataAttributesTable[name="class",]
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
globalvariables1$dataset$classLevel
max(globalvariables1$dataset$classLevel)
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.mutate(pppMutate)
tree
tree
GA.mutation(pppMutate)
tree
DataTypes
data_min
data_max
Nc
tree[n,"class"
]
GA.mutation(pppMutate)
vvar1
toString(vvar1)
class(vvar1)
toString(vvar1)
toString(tree1)
Ltrees = list(tree = toString(vvar1),evaluation=toString(vvar2))
toJSON(Ltrees,auto_unbox = TRUE)
typeof(tree1)
typeof(vvar1)
class(tree1)
GA.createTrees(pppCreateTrees)
vvar1
toString(vvar1)
GA.mutation(pppMutate)
vvar1
vvar1
toString(vvar1)
is.character(vvar1[1,1])
is.numeric(vvar1[1,1])
data.frame(lapply(vvar1, as.numeric))
toJSON(data.frame(lapply(vvar1, as.numeric)))
toString(data.frame(lapply(vvar1, as.numeric)))
toString(unlist(data.frame(lapply(vvar1, as.numeric))))
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.mutation(pppMutate)
query
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.mutation(pppMutate)
tree
vvar1 <- GA.mutate(tree1,datatypes,min1,max1,max(globalvariables1$dataset$classLevel))
vvar1
colnames(vvar1)<-NULL
tree = unlist(data.frame(lapply(vvar1, as.numeric)))
tree
vvar1
toString(vvar1)
unlist(vvar)
unlist(vvar1)
unlist(vvar1)
toString(vvar1)
GA.mutation(pppMutate)
GA.mutation(pppMutate)
colnames(vvar1)<-NULL
vvar1
tree
data.frame(lapply(vvar1, as.numeric)
)
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
GA.mutation(pppMutate)
GA.mutation(pppMutate)
GA.mutation(pppMutate)
GA.mutation(pppMutate)
tree
tree
source("E:/GitHub_test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R", encoding = 'UTF-8')
library(httr)
library(jsonlite)
library(httr)
library(jsonlite)
library(stringr)
library(crayon)
source("Readparams.R")
source("Utils.R")
source("dataset.R")
source("Circle.R")
GA.createTrees(pppCreateTrees)
GA.mainCircle()
GA.circle()
GA.circle()
source("D:/_ΕΑΠ/ΔΙΠΛΩΜΑΤΙΚΗ/Test1/Test1/_GAtree/GATreeWebStore/R client/main.R")
GA.circle()
response
GA.circle()
ppp
View(pppMutate)
GA.mutate(pppMutate)
GA.mutation(pppMutate)
min1
max1
datatypes
max(globalvariables1$dataset$classLevel)
GA.mutation(pppMutate)
tree1
trees <- fromJSON(response$result)
trees
tree1 <- GA.convert_A_tree_to_table(trees$tree)
tree1
globalvariables1$tree_labels
globalvariables1$tree_labels <- c("id","var","split","class","lChild","rChild")
GA.mutation(pppMutate)
GA.mutation(pppMutate)
globalvariables1$tree_labels
lobalvariables1$tree_labels <- c("id","var","split","class","lChild","rChild")
globalvariables1$tree_labels <- c("id","var","split","class","lChild","rChild")
globalvariables1$tree_labels
tree1
names(tree1) <- globalvariables1$tree_labels
tree1
GA.mutation(pppMutate)
source("D:/_ΕΑΠ/ΔΙΠΛΩΜΑΤΙΚΗ/Test1/Test1/_GAtree/GATreeWebStore/R client/Circle.R")
GA.mutation(pppMutate)
globalvariables1$tree_labels
lobalvariables1$tree_labels
globalvariables1$tree_labels
globalvariables1$tree_labels <- c("id","var","split","class","lChild","rChild")
globalvariables1$tree_labels <<- c("id","var","split","class","lChild","rChild")
pppMutate
source("D:/_ΕΑΠ/ΔΙΠΛΩΜΑΤΙΚΗ/Test1/Test1/_GAtree/GATreeWebStore/R client/Readparams.R")
